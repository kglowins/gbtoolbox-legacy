package gui_modules;

import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

import javax.swing.border.EtchedBorder;

import net.miginfocom.swing.MigLayout;
import utils.FileUtils;
import utils.GBDistReader;
import algorithms.GBCD_GBPB_PreviewFigure;
import javax.swing.JComboBox;

import enums.ColormapNames;
import enums.PointGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.JCheckBox;

public class PreviewGBCD_GBPDPanel extends JPanel {
	private JTextField fldFile;
	
	private JButton btnFile;
		
	private FileUtils.PNGFileFilter pngFilter = new FileUtils.PNGFileFilter();
	private FileUtils.EPSFileFilter epsFilter = new FileUtils.EPSFileFilter();

	private File lastDir = null;
	
	private final static String M3M = "cubic";
	private final static String _6MMM = "hexagonal";
	private final static String _4MMM = "tetragonal";
	private final static String MMM = "orthorombic";
	
	
	private final static String SPECTRUM = "spectral";
	private final static String JET = "jet";	 	
	private final static String BONE = "bone";
	private final static String YELLOWGRAY = "gray/yellow";
	
	private final static String REDBLUE = "blue/red";	
	private final static String BLUEYELLOWRED = "blue/yellow/red";
	
	private final static String GNUPLOT= "gnuplot";	
	private final static String REDGRAY= "red/gray";
	
	
	
	private JButton clearBtn;
	private JLabel lblComment;
	private JLabel axesLbl;
	
	private JComboBox axesCb;
	
	private PointGroup axes;
	private JLabel lblFile;
	private ColormapNames colmap;
	
	private final FileUtils.GBDistFileFilter gbdistFilter = new FileUtils.GBDistFileFilter(); 
	private JLabel isoLbl;
	private JSpinner isolinesSpin;
	private JLabel colormapLbl;
	private JComboBox colormapCb;
	//private JLabel OrderLabel;
	//private JSpinner orderSpin;

	private boolean smallFont;
	private JCheckBox sstChB;
	private JLabel label;
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_1;
	private JSpinner bottomSpin;
	private JSpinner topSpin;
	private JLabel lblNewLabel_2;
	private JLabel label_1;
	private JLabel fontLbl;
	private JSpinner fontSpin;
	private JLabel decimalLbl;
	private JSpinner decimalSpin;

	public PreviewGBCD_GBPDPanel() {
		setLayout(new MigLayout("", "[][]", "[][][][][][][][][][][][][][][]"));
		
		axes = PointGroup.M3M;
		colmap = ColormapNames.SPECTRUM;
		smallFont = false;
		
		JLabel lblDrawPoints = new JLabel("<html><b>Plot distributions:</b>");
		lblDrawPoints.setToolTipText("Open a file generated by one of the modules for calculating boundary plane distributions");
		add(lblDrawPoints, "cell 0 0,gapy 0 5");
		
		lblFile = new JLabel("<html><u>File with computed distribution</u>:");
		add(lblFile, "cell 0 1,alignx left,gapx 10,gapy 5");

		final GBCD_GBPB_PreviewFigure polePane = new GBCD_GBPB_PreviewFigure(); //TODO
		
		fldFile = new JTextField();
		add(fldFile, "flowx,cell 0 2,alignx left,gapx 10");
		fldFile.setColumns(18);
		
		JButton repaintBtn = new JButton("(Re)plot");
		add(repaintBtn, "flowx,cell 0 3,alignx left,gapx 10,gapy 15");
		
				
		repaintBtn.addActionListener(new ActionListener() { 
			@Override
			public void actionPerformed(ActionEvent evt) {
				
				final int bottom = (int)bottomSpin.getValue();
				final int top = (int)topSpin.getValue();
				
				if(bottom >= top) {
					JOptionPane.showMessageDialog(null,
						    "Bottom shift must be less than top shift.",
						    "Error",
						    JOptionPane.ERROR_MESSAGE);
					
					
					polePane.clearPoints();					
					polePane.repaint();

					return;
				}
				
				setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

				
				polePane.setScale(bottom/100f, top/100f);
				polePane.clearPoints();
				polePane.setSST(sstChB.isSelected());
				
				
				
				String f = fldFile.getText();
						
						
				ArrayList<Double> xArr = new ArrayList<Double>();
				ArrayList<Double> yArr = new ArrayList<Double>();
				ArrayList<Double> mrdArr = new ArrayList<Double>();
						
												
				try {
					BufferedReader in = new BufferedReader(new FileReader(f));
					
					GBDistReader reader = new GBDistReader();
					reader.readHeaderLines(in);
						
					String line = null;
																		
					while ((line = in.readLine()) != null)   {
														
						if(!line.matches("^\\s*#.*")) {
								
							final String[] num = line.trim().split("\\s+");			
								
							final double x = Double.parseDouble(num[0]);
							final double y = Double.parseDouble(num[1]);
							final double mrd = Double.parseDouble(num[4]);
								
							xArr.add(x);
							yArr.add(y);
							mrdArr.add(mrd);
							
						} else {
							if (line.indexOf("FRAC_FIXMISOR") > -1) smallFont = true;
						}
					}
							
					in.close();
						
					
					polePane.setNLevels((Integer)isolinesSpin.getValue());
				
					if(sstChB.isSelected()) {
						polePane.setPointsSST(xArr, yArr, mrdArr, (int)fontSpin.getValue(), (int)decimalSpin.getValue());
					} else {
						polePane.setPoints(xArr, yArr, mrdArr, (int)fontSpin.getValue(), (int)decimalSpin.getValue());
					}
					
					polePane.repaint();
							
				} catch (IOException e) {

					JOptionPane.showMessageDialog(null,
						    "An I/O error occurred.",
						    "Error",
						    JOptionPane.ERROR_MESSAGE);
					setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
					
					polePane.clearPoints();					
					polePane.repaint();

					return;
				}		
						
				setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

		
			}
		});
		
		axesLbl = new JLabel("Symmetry (axes):");
		add(axesLbl, "flowx,cell 0 4,alignx left,gapx 10,gapy 15");
		
		sstChB = new JCheckBox("SST only");
		add(sstChB, "cell 0 5,gapx 10,gapy 10");
		
		fontLbl = new JLabel("Font size:");
		add(fontLbl, "flowx,cell 0 6,gapx 10,gapy 10");
		
		decimalLbl = new JLabel("Decimal places:");
		add(decimalLbl, "flowx,cell 0 7,gapx 10,gapy 10");
		
		isoLbl = new JLabel("Number of isolines:");
		add(isoLbl, "flowx,cell 0 8,gapx 10,gapy 10");
		
	//	OrderLabel = new JLabel("Interpolation order");
	//	add(OrderLabel, "flowx,cell 0 6,gapx 10,gapy 10");
		
		colormapLbl = new JLabel("Color scheme");
		add(colormapLbl, "flowx,cell 0 9,gapx 10,gapy 10");
		
		label = new JLabel("Shift colormap:");
		add(label, "cell 0 10,gapx 10,gapy 10");
		
		lblNewLabel = new JLabel("From bottom:");
		add(lblNewLabel, "flowx,cell 0 11,gapx 20");
	
		final JFileChooser pngFc = new JFileChooser() {
			@Override
			public void approveSelection() {  			  
				File f = getSelectedFile();

				if ( f.exists() ) {  
					String msg = "The file \"{0}\" already exists!\nAre you sure you want to replace it?";  
					msg = MessageFormat.format( msg, new Object[] { f.getName() } );  
					String title = getDialogTitle();  
					int option = JOptionPane.showConfirmDialog( this, msg, title, JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE );  
					if ( option == JOptionPane.NO_OPTION ) {  
						return;  
					}  
				} else { 			  

					String fName = f.getAbsolutePath();						
					final String ext = FileUtils.getExtension(f);

					if(ext != null) {
						if(ext.compareTo("png") != 0) fName += ".png";
					} else {							
						if(fName.charAt(fName.length() - 1) == '.') fName += "png";
						else fName += ".png";
					}

					File alterF = new File(fName) ;

					if ( alterF.exists() ) {  
						String msg = "The file \"{0}\" already exists!\nAre you sure you want to replace it?";  
						msg = MessageFormat.format( msg, new Object[] { fName } );  
						String title = getDialogTitle();  
						int option = JOptionPane.showConfirmDialog( this, msg, title, JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE );  
						if ( option == JOptionPane.NO_OPTION ) {  
							return;  
						}  
					}  	
				}
				super.approveSelection();  
			}   
		};
		
		
		pngFc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		pngFc.setAcceptAllFileFilterUsed(false);
		pngFc.addChoosableFileFilter(pngFilter);
		
		
		final JFileChooser epsFc = new JFileChooser() {
			@Override
			public void approveSelection() {  			  
				File f = getSelectedFile();

				if ( f.exists() ) {  
					String msg = "The file \"{0}\" already exists!\nAre you sure you want to replace it?";  
					msg = MessageFormat.format( msg, new Object[] { f.getName() } );  
					String title = getDialogTitle();  
					int option = JOptionPane.showConfirmDialog( this, msg, title, JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE );  
					if ( option == JOptionPane.NO_OPTION ) {  
						return;  
					}  
				} else { 			  

					String fName = f.getAbsolutePath();						
					final String ext = FileUtils.getExtension(f);

					if(ext != null) {
						if(ext.compareTo("eps") != 0) fName += ".eps";
					} else {							
						if(fName.charAt(fName.length() - 1) == '.') fName += "eps";
						else fName += ".eps";
					}

					File alterF = new File(fName) ;

					if ( alterF.exists() ) {  
						String msg = "The file \"{0}\" already exists!\nAre you sure you want to replace it?";  
						msg = MessageFormat.format( msg, new Object[] { fName } );  
						String title = getDialogTitle();  
						int option = JOptionPane.showConfirmDialog( this, msg, title, JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE );  
						if ( option == JOptionPane.NO_OPTION ) {  
							return;  
						}  
					}  	
				}
				super.approveSelection();  
			}   
		};
		epsFc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		epsFc.setAcceptAllFileFilterUsed(false);
		epsFc.addChoosableFileFilter(epsFilter);
		
		
		
		polePane.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		add(polePane, "cell 1 0 1 15,gapx 10");
		
		
		final JFileChooser fc = new JFileChooser();
		fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		fc.setAcceptAllFileFilterUsed(false);
		fc.addChoosableFileFilter(gbdistFilter);
		
		btnFile = new JButton();
		btnFile.setPreferredSize(new Dimension(24,24));
		btnFile.setMaximumSize(new Dimension(24,24));
		btnFile.setMinimumSize(new Dimension(24,24));
		btnFile.setIcon(new ImageIcon(PreviewGBCD_GBPDPanel.class.getResource("/gui_bricks/folder.png")));
		add(btnFile, "cell 0 2,alignx left");
		
		clearBtn = new JButton("Clear");
		add(clearBtn, "cell 0 3,alignx left,gapy 15");
		
		axesCb = new JComboBox();
		axesCb.setModel(new DefaultComboBoxModel(new String[] {M3M, _6MMM, _4MMM, MMM}));
		add(axesCb, "cell 0 4,alignx left,gapy 15");
		
		isolinesSpin = new JSpinner();
		isolinesSpin.setModel(new SpinnerNumberModel(10, 3, 30, 1));
		add(isolinesSpin, "cell 0 8,gapy 10");
		
		colormapCb = new JComboBox();
		colormapCb.setModel(new DefaultComboBoxModel(new String[] {SPECTRUM, JET, BONE,YELLOWGRAY, REDBLUE, BLUEYELLOWRED, GNUPLOT,REDGRAY}));
		add(colormapCb, "cell 0 9,gapy 10");
		
		bottomSpin = new JSpinner();
		bottomSpin.setModel(new SpinnerNumberModel(0, -100, 100, 1));
		add(bottomSpin, "cell 0 11");
		
		lblNewLabel_2 = new JLabel("%");
		add(lblNewLabel_2, "cell 0 11");
		
		fontSpin = new JSpinner();
		fontSpin.setModel(new SpinnerNumberModel(36, 12, 48, 2));
		add(fontSpin, "cell 0 6,gapy 10");
		
		decimalSpin = new JSpinner();
		decimalSpin.setModel(new SpinnerNumberModel(1, 0, 6, 1));
		add(decimalSpin, "cell 0 7,gapy 10");
		
		lblNewLabel_1 = new JLabel("From top:");
		add(lblNewLabel_1, "flowx,cell 0 12,gapx 20");
		
		JButton pngBtn = new JButton("PNG");
		add(pngBtn, "flowx,cell 0 13,alignx left,gapx 10,gapy 15");
		
		pngBtn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent evt) {
							
				setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

				if(lastDir != null) pngFc.setCurrentDirectory(lastDir);

				int returnVal = pngFc.showDialog(PreviewGBCD_GBPDPanel.this, "Export");
				if(returnVal == JFileChooser.APPROVE_OPTION) {
					try {
						final File f = pngFc.getSelectedFile();
						String fName = f.getAbsolutePath();						
						final String ext = FileUtils.getExtension(f);
						
						if(ext != null) {
							if(ext.compareTo("png") != 0) fName += ".png";
						} else {							
							if(fName.charAt(fName.length() - 1) == '.') fName += "png";
							else fName += ".png";
						}
						
						polePane.exportToPNG(fName);
						
						lastDir = f.getParentFile();
						
					} catch(IOException exc) {
						JOptionPane.showMessageDialog(null,
								"An I/O error occured.",
							    "Error",
							    JOptionPane.ERROR_MESSAGE);
						return;
					}
				}	
				setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

			}
		});
		
		topSpin = new JSpinner();
		topSpin.setModel(new SpinnerNumberModel(100, 0, 200, 1));
		add(topSpin, "cell 0 12");
		
		label_1 = new JLabel("%");
		add(label_1, "cell 0 12");
		
		lblComment = new JLabel("<html><small>\r\n<font color=#0000cc><b>Note:</b>\r\ninterpolating and plotting<br>\r\nof a distribution function<br>\r\nmay take a couple of seconds.</b></font></small>");
		add(lblComment, "cell 0 14,aligny bottom");
		
		axesCb.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            	
                JComboBox cb = (JComboBox) e.getSource();
                String sel = cb.getSelectedItem().toString();
                
                switch(sel) {
                case M3M:
                	axes = PointGroup.M3M;
                	
                	break;
                	
                case _6MMM:
                	axes = PointGroup._6MMM;
                	break;
                	
                case _4MMM:
                	axes = PointGroup._4MMM;
                	break;
                	
                case MMM:
                	axes = PointGroup.MMM;
                	break;
                	
                	default: break;
                }
                polePane.setFontSize((int) fontSpin.getValue());
                polePane.setPtGrp(axes);
                polePane.setSST(sstChB.isSelected());
                if(!sstChB.isSelected()) polePane.repaint();
            }
		});
		
		
		colormapCb.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            	
                JComboBox cb = (JComboBox) e.getSource();
                String sel = cb.getSelectedItem().toString();
                
                switch(sel) {
                
                case SPECTRUM: colmap = ColormapNames.SPECTRUM; break;
                case JET: colmap = ColormapNames.JET; break;
                case BONE: colmap = ColormapNames.BONE; break;
                case YELLOWGRAY: colmap = ColormapNames.YELLOWGRAY; break;                
                case REDBLUE: colmap = ColormapNames.REDBLUE; break;
                case BLUEYELLOWRED: colmap = ColormapNames.BLUEYELLOWRED; break;
                case GNUPLOT: colmap = ColormapNames.GNUPLOT; break;
                case REDGRAY: colmap = ColormapNames.REDGRAY; break;

                	
                	default:  colmap = ColormapNames.SPECTRUM; break;
                }
                polePane.setColormap(colmap);
                polePane.repaint();
            }
		});
		
		clearBtn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent evt) {
				polePane.setSST(sstChB.isSelected());
				polePane.clearPoints();				
				polePane.repaint();
			}
		});
		
		

		btnFile.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent evt) {
				fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
				int returnVal = fc.showOpenDialog(PreviewGBCD_GBPDPanel.this);
				if(returnVal == JFileChooser.APPROVE_OPTION) {
					fldFile.setText(fc.getSelectedFile().getAbsolutePath());
				}	
			}
		});
		
		

	}
	
}
